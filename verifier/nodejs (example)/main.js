const { verify_js } = require('../verifier-js/nitro_attestation_verifier.js');

const base64ToUint8Array = (base64) => {
  const array = Uint8Array.from(Buffer.from(base64, 'base64'))
  console.log(array)
  return array
}

const dateToBigInt = (date) => {
  const num = BigInt(date.getTime()) / BigInt(1000)
  console.log(num)
  return num
}

const parsePcr = (pcr) => {
  const bytes = new Uint8Array(pcr.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));
  console.log(bytes)
  return bytes
}

async function main() {
  const date = new Date()
  // 2 hours ago
  // date.setHours(date.getHours() - 2)

  // PCRs are 0 when nitriding is in debug mode
  // const pcrs = new Array(16).fill().map(() => new Uint8Array(48));
  // console.log(pcrs)

  // Nonce is always zero
  const nonce = new Uint8Array(20)

  // Now you can call your functions
  const result = verify_js(
    base64ToUint8Array(
      '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\n'
    ),
    nonce,
    [
      parsePcr(
        '294e8442cb9eccf0a6e0f7052cf43b2d294f557628a55d7ba7b0137aa13d944c90bd5f627cb6de29c60b7b861e790ea3'
      ),
      parsePcr(
        '0343b056cd8485ca7890ddd833476d78460aed2aa161548e4e26bedf321726696257d623e8805f3f605946b3d8b0c6aa'
      ),
      parsePcr(
        '4e805c51312651e9aebd8ea6bed35750f6c21d94110fcc02db66bbd321f605eaf863ba407e513ea93dc3b2b3f9f6922d'
      )
    ],
    dateToBigInt(date),
    "MIICETCCAZagAwIBAgIRAPkxdWgbkK/hHUbMtOTn+FYwCgYIKoZIzj0EAwMwSTELMAkGA1UEBhMCVVMxDzANBgNVBAoMBkFtYXpvbjEMMAoGA1UECwwDQVdTMRswGQYDVQQDDBJhd3Mubml0cm8tZW5jbGF2ZXMwHhcNMTkxMDI4MTMyODA1WhcNNDkxMDI4MTQyODA1WjBJMQswCQYDVQQGEwJVUzEPMA0GA1UECgwGQW1hem9uMQwwCgYDVQQLDANBV1MxGzAZBgNVBAMMEmF3cy5uaXRyby1lbmNsYXZlczB2MBAGByqGSM49AgEGBSuBBAAiA2IABPwCVOumCMHzaHDimtqQvkY4MpJzbolL//Zy2YlES1BR5TSksfbb48C8WBoyt7F2Bw7eEtaaP+ohG2bnUs990d0JX28TcPQXCEPZ3BABIeTPYwEoCWZEh8l5YoQwTcU/9KNCMEAwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUkCW1DdkFR+eWw5b6cp3PmanfS5YwDgYDVR0PAQH/BAQDAgGGMAoGCCqGSM49BAMDA2kAMGYCMQCjfy+Rocm9Xue4YnwWmNJVA44fA0P5W2OpYow9OYCVRaEevL8uO1XYru5xtMPWrfMCMQCi85sWBbJwKKXdS6BptQFuZbT73o/gBh1qUxl/nNr12UO8Yfwr6wPLb+6NIwLz3/Y="
  )
  console.log(result)
}

main().catch(console.error)
